AWSTemplateFormatVersion: '2010-09-09'
Description: Create a VPC with two AZ and Four subnet 
# My Vpc
Resources:
  MyVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: MyVpc
# Public Subnet 1a
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: '10.0.1.0/20'
      AvailabilityZone: "us-west-1a"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: PublicSubnet1

# app-Private Subnet 1a Subnet 1
  AppPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: '10.0.16.0/20'
      AvailabilityZone: "us-west-1a"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: AppPrivateSubnet1

# Public Subnet 1b
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: '10.0.48.0/20'
      AvailabilityZone: "us-west-1c"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: PublicSubnet2

# app-Private Subnet 1b Subnet 2
  AppPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: '10.0.32.0/20'
      AvailabilityZone: "us-west-1c"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: AppPrivateSubnet2

# Defining the Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: 'Name'
          Value: MyIGW

# Attaching the Internet Gateway to the VPC
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref MyVpc

# Public Route within VPC:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: PublicRouteTable

#Private Route within VPC
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: 'Name'
          Value: PrivateRouteTable

# Attaching PublicRoute to IGW:
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

# PublicSubnet1 Route Table Association
  PublicSubnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# PublicSubnet2 Route Table Association
  PublicSubnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

#PrivateSubnet1 Route Table
  PrivateSubnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref AppPrivateSubnet1
#PrivateSubnet2 Route Table
  PrivateSubnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref AppPrivateSubnet2

#Bastion Host 
  BastionHS:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-04fdea8e25817cd69
      SubnetId: !Ref PublicSubnet1
      KeyName: bash
      Tags:
        - Key: 'Name'
          Value: BastionHS
      SecurityGroupIds:
        - !Ref 'BastionSG'

# Bastion SG
  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow ssh into your instance"
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: 'Name'
          Value: BastionSG

# App Instance:
  AppInstance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04fdea8e25817cd69
      InstanceType: t2.micro
      SubnetId: !Ref AppPrivateSubnet1
      KeyName: rush
      Tags:
        - Key: 'Name'
          Value: AppInstance1
      SecurityGroupIds:
        - !Ref 'AppSG1A'



# App1 SG:
  AppSG1A:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from the Bastion host
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
      Tags:
        - Key: 'Name'
          Value: AppSG1A

# App Instance2:
  AppInstance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04fdea8e25817cd69
      InstanceType: t2.micro
      KeyName: kash
      SubnetId: !Ref AppPrivateSubnet2
      Tags:
        - Key: 'Name'
          Value: AppInstance2
      SecurityGroupIds:
        - !Ref AppSG1C


#App2 SG:
  AppSG1C:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow to ping from app private 1
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: 'icmp'
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !Ref AppSG1A
      Tags:
        - Key: 'Name'
          Value: AppSG1C